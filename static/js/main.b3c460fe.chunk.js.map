{"version":3,"sources":["reportWebVitals.js","pages/favorite_dishes/FavoritePage.jsx","components/dish/Dish.jsx","App.jsx","api/dishes.js","components/router/RouterComp.jsx","index.jsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FavoritePage","Dish","currentDish","ingredients","src","strMealThumb","className","alt","strMeal","length","strInstructions","map","data","App","useState","setCurrentDish","setIngredients","fetchRandomDish","a","fetch","response","json","meals","fetchedDish","ingredientsData","i","push","filteredIngredients","filter","useEffect","type","onClick","RouterComp","href","exact","path","render","to","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"sOAceA,G,MAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,sBCPDQ,EAAe,kBAC1B,8BACE,mD,iCCASC,G,YAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,YAAhB,OAClB,gCACE,qBACEC,IAAKF,EAAYG,aACjBC,UAAU,WACVC,IAAI,SAEN,+BACGL,EAAYM,QACZL,EAAYM,UAEf,4BACGP,EAAYQ,kBAEf,8CAEGP,EAAYQ,KAAI,SAACC,GAAD,OAAW,6BAAgBA,GAAPA,cCf9BC,EAAM,WAAO,IAAD,EACeC,mBAAS,IADxB,mBAChBZ,EADgB,KACHa,EADG,OAEeD,mBAAS,IAFxB,mBAEhBX,EAFgB,KAEHa,EAFG,KAKjBC,EAAe,uCAAG,kCAAAC,EAAA,sECPxBC,MAHc,sDAIXzB,MAAK,SAAC0B,GAAD,OAAcA,EAASC,UAC5B3B,MAAK,SAACkB,GAAD,OAAUA,EAAKU,MAAM,MDKL,OAGtB,IAFMC,EADgB,OAEhBC,EAAkB,GACfC,EAAI,EAAGA,GAAK,GAAIA,GAAK,EACxBF,EAAY,gBAAD,OAAiBE,KAC9BD,EAAgBE,KAAhB,UACKH,EAAY,gBAAD,OAAiBE,IADjC,YAEIF,EAAY,aAAD,OAAcE,MAI3BE,EAAsBH,EAAgBI,QAAO,SAAChB,GAAD,OAAUA,EAAKH,OAAS,KAC3EO,EAAeW,GACfZ,EAAeQ,GAbO,2CAAH,qDAwBrB,OAJAM,qBAAU,WACRZ,MACC,IAGD,sBAAKX,UAAU,MAAf,UAEE,wBACEwB,KAAK,SACLC,QAAS,kBAAOd,KAFlB,kBAMA,wBACEa,KAAK,SACLC,QAAS,kBAAOd,KAFlB,kBAMA,cAAC,EAAD,CACEf,YAAaA,EACbC,YAAaA,QE5CR6B,EAAa,kBACxB,8BACE,eAAC,IAAD,WACE,mBAAGC,KAAK,QAAR,uBACA,mBAAGA,KAAK,aAAR,4BACA,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACN,cAAC,IAAD,CAAUC,GAAG,aAGjB,cAAC,IAAD,CAAOF,KAAK,QAAQG,UAAWzB,IAC/B,cAAC,IAAD,CAAOsB,KAAK,aAAaG,UAAWtC,aCf5CuC,IAASH,OACP,cAAC,IAAMI,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BnD,M","file":"static/js/main.b3c460fe.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nexport const FavoritePage = () => (\n  <div>\n    <h1>Favorite page!</h1>\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Dish.css';\n\nexport const Dish = ({ currentDish, ingredients }) => (\n  <div>\n    <img\n      src={currentDish.strMealThumb}\n      className=\"dish_img\"\n      alt=\"Dish\"\n    />\n    <h1>\n      {currentDish.strMeal}\n      {ingredients.length}\n    </h1>\n    <p>\n      {currentDish.strInstructions}\n    </p>\n    <ul>\n      Ingredients:\n      {ingredients.map((data) => (<li key={data}>{data}</li>))}\n    </ul>\n  </div>\n);\n\nDish.propTypes = {\n  currentDish: PropTypes.shape({\n    idMeal: PropTypes.number.isRequired,\n    strMealThumb: PropTypes.string.isRequired,\n    strMeal: PropTypes.string.isRequired,\n    strInstructions: PropTypes.string.isRequired,\n  }).isRequired,\n  ingredients: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { getRandomDish } from './api/dishes';\nimport { Dish } from './components/dish/Dish';\n\nexport const App = () => {\n  const [currentDish, setCurrentDish] = useState({});\n  const [ingredients, setIngredients] = useState([]);\n  // const [favoriteDishes, setFavoriteDishes] = useState([]);\n\n  const fetchRandomDish = async () => {\n    const fetchedDish = await getRandomDish();\n    const ingredientsData = [];\n    for (let i = 1; i <= 20; i += 1) {\n      if (fetchedDish[`strIngredient${i}`]) {\n        ingredientsData.push(\n          `${fetchedDish[`strIngredient${i}`]} ${\n            fetchedDish[`strMeasure${i}`]}`,\n        );\n      }\n    }\n    const filteredIngredients = ingredientsData.filter((data) => data.length > 3);\n    setIngredients(filteredIngredients);\n    setCurrentDish(fetchedDish);\n  };\n\n  // const saveToFavorite = () => {\n  //   setFavoriteDishes((prevFav) => [...prevFav, currentDish]);\n  // };\n\n  useEffect(() => {\n    fetchRandomDish();\n  }, []);\n\n  return (\n    <div className=\"App\">\n\n      <button\n        type=\"button\"\n        onClick={() => (fetchRandomDish())}\n      >\n        Skip\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => (fetchRandomDish())}\n      >\n        Save\n      </button>\n      <Dish\n        currentDish={currentDish}\n        ingredients={ingredients}\n      />\n    </div>\n  );\n};\n","const API_URL = 'https://www.themealdb.com/api/json/v1/1/random.php';\n\nexport const getRandomDish = () => (\n  fetch(API_URL)\n    .then((response) => response.json())\n    .then((data) => data.meals['0'])\n);\n","import React from 'react';\nimport {\n  BrowserRouter, Route, Switch, Redirect,\n} from 'react-router-dom';\nimport { FavoritePage } from '../../pages/favorite_dishes/FavoritePage';\nimport { App } from '../../App';\n\nexport const RouterComp = () => (\n  <div>\n    <BrowserRouter>\n      <a href=\"/main\">Main Page</a>\n      <a href=\"/favorites\">Favorites page</a>\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <Redirect to=\"/main\" />\n          )}\n        />\n        <Route path=\"/main\" component={App} />\n        <Route path=\"/favorites\" component={FavoritePage} />\n      </Switch>\n    </BrowserRouter>\n  </div>\n);\n\nexport default RouterComp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { RouterComp } from './components/router/RouterComp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RouterComp />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}